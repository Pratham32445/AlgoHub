// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  Id        String  @id @default(uuid())
  userId    String?
  profileId String?
  email     String
  password  String?
  profile   Profile? @relation(fields: [profileId], references: [Id])
}

model DailyProblems {
  Id    String             @id @default(uuid())
  Dates DailyProblemDate[]
}

model DailyProblemDate {
  Id             String        @id @default(uuid())
  dailyProblemId String
  dailyproblem   DailyProblems @relation(fields: [dailyProblemId], references: [Id])
  date           DateTime      @unique
  problemId      String
}

model Profile {
  Id           String      @id @default(uuid())
  user         User[]
  Name         String?
  location     String?
  summary      String?
  Gender       GenderType  @default(MALE)
  work         String?
  education    String?
  skills       String[]
  socialLinkId String
  socialLinks  SocialLinks @relation(fields: [socialLinkId], references: [Id])
  points       String[]
  question     Question[]
  avatar       String?
}

model SocialLinks {
  Id       String    @id @default(uuid())
  website  String?
  github   String?
  linkedin String?
  twitter  String?
  profile  Profile[]
}

model Question {
  Id                  String            @id @default(cuid())
  title               String
  desc                String
  difficulty          Difficulty
  example             String[]
  constraints         String[]
  topics              String[]
  companies           String[]
  Profile             Profile?          @relation(fields: [profileId], references: [Id])
  profileId           String?
  acceptancerate      String?
  likes               Int               @default(0)
  dislikes            Int               @default(0)
  problemdiscussionId String
  discussion          ProblemDiscussion @relation(fields: [problemdiscussionId], references: [Id])
  Editorial           String[]
}

model ProblemDiscussion {
  Id           String       @id @default(uuid())
  question     Question[]
  discussionId String
  discussion   Discussion[]
}

model Discussion {
  Id                  String             @id @default(uuid())
  query               String
  upvotes             Int
  downvotes           Int
  replies             String[]
  ProblemDiscussion   ProblemDiscussion? @relation(fields: [problemDiscussionId], references: [Id])
  problemDiscussionId String?
  type                DiscussionType     @default(QUESTION)
}

enum DiscussionType {
  FEEDBACK
  QUESTION
  TIP
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum GenderType {
  MALE
  FEMALE
}
